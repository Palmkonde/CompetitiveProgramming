/**
                GURA IS THE BEST!!!!!!!
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣀⣀⣀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣤⣶⠞⢛⣿⠛⠻⢦⣎⠉⠙⠲⢦⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣴⠾⠿⠿⠶⢤⣄⡙⠻⠶⠟⠋⠀⠀⠀⢀⣈⡙⢶⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⢀⠴⠊⠁⠀⠀⠀⠀⠀⠀⠀⠉⠳⢤⡀⠀⠀⠀⠀⠘⠻⣿⣶⣈⡙⢦⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⡰⠃⠀⣠⠴⠒⠚⠉⠐⢒⡤⣀⠀⠀⠀⠙⢦⡀⠀⠀⠀⠀⠀⣽⣯⣤⣀⡙⢷⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⡰⠁⣠⡞⢀⡴⠛⢄⢀⡔⠋⠳⡀⠑⢄⠀⠀⠀⠙⢦⡀⠀⠀⠀⠈⠉⠉⠉⠙⠛⠿⣄⡀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⢰⠃⢰⡿⠣⠋⠀⠀⠀⡅⠀⠀⠀⠙⣄⡤⢷⢄⠀⠀⠀⠙⢦⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠛⠓⢦⣄⠀⠀⠀⠀⠀
⠀⠀⠀⠀⡎⢠⣿⠁⠀⠀⠀⠀⠀⣷⣀⠀⠀⠀⠀⢄⠈⣇⢑⣄⠀⠀⠀⠙⢦⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠙⢦⡀⠀⠀
⠀⠀⠀⠸⡇⣞⠟⣄⠀⠀⡄⠀⠀⢻⡎⢆⠀⠀⢀⡈⣦⣸⡛⡇⠳⣄⠀⠀⠀⠻⣦⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢻⣦⠀
⠀⠀⠀⠀⣧⡟⠀⢻⣦⡄⠸⡄⠀⠘⡟⣼⡷⣞⠉⣀⡸⠈⠛⢷⠀⡈⠢⡀⠀⠀⠈⠳⣦⡀⠀⠀⠀⠀⠀⢀⣠⡤⠖⠋⠁⠀
⠀⠀⠀⢸⢹⠁⢸⡀⢻⣿⣄⠹⡄⠀⢣⠙⠇⠈⣉⣠⣴⣶⣶⣾⣧⡇⠀⠹⣷⡄⠀⠀⠈⠻⣄⠤⠶⠶⠾⣿⡄⠀⠀⠀⠀⠀
⠀⠀⢠⣿⠘⠀⢺⣷⠈⡟⢟⣳⡼⠒⠊⠀⠀⢠⡿⣿⠋⠉⢹⠉⡇⡇⠀⠀⠘⣿⡄⠀⠀⠀⠙⣆⠀⠀⠀⠈⢿⡀⠀⠀⠀⠀
⠀⢠⣿⣿⠠⡀⠀⣿⣷⣧⣤⣭⣆⠀⠀⠀⠀⠀⠀⠹⣄⣠⠎⠀⡼⢠⠀⠀⠀⢹⣷⠀⠀⠀⠀⢸⡄⠀⠀⠀⠀⣷⠀⠀⠀⠀
⢀⡿⠁⣿⢀⠇⠀⢸⣿⡿⢻⡁⢸⠇⠀⠀⠀⠀⠀⠀⠀⠀⢀⣞⣴⠃⠀⠀⠰⣸⡏⡇⠀⠀⠀⢸⡇⠀⠀⠀⠀⢿⡆⠀⠀⠀
⢸⣷⣴⣿⠎⠀⠀⠀⢷⢳⡀⠛⠫⠀⠀⠀⢀⣀⡀⠴⠒⠊⠉⠁⡟⠀⠀⠀⠀⣿⣿⡇⠀⠀⠀⢸⡇⠀⠀⣠⣴⣾⡇⠀⠀⠀
⠀⠀⣠⣋⡼⡄⠀⠐⢌⣿⣇⠀⠀⠀⣠⣾⠟⠛⠛⡄⠀⠀⠀⠀⡇⠀⡀⠀⡄⢹⡿⠀⠀⠀⢀⡿⣀⣶⣿⣿⣿⣿⡇⠀⠀⠀
⠀⠈⠉⢹⣧⡯⡀⠀⠀⠙⢿⠒⠂⠀⠙⠧⢤⣤⠾⠃⠀⠀⠀⢠⠃⢠⡃⠀⢸⣌⡆⠀⠀⢀⣾⣿⣿⣿⣿⣿⣿⠿⠁⠀⡆⠀
⠀⠀⠀⠀⣿⣿⡁⠀⢀⡇⢸⣷⣤⣀⠀⠀⠀⠀⠀⠀⠀⣀⡴⡿⠀⣾⡇⠀⣸⠛⢿⣖⣺⣿⣿⣿⣿⣿⣿⠛⠁⠀⠀⡜⠀⠀
⠀⠀⠀⠀⣿⣿⡇⢀⢸⣿⣌⡟⢜⢮⣹⢶⡦⠤⣤⠾⣿⠟⣡⢃⣾⡿⢃⢀⡟⠒⠚⠛⠛⠿⢿⡿⢻⡧⣀⠑⢄⡀⣼⠀⠀⠀
⠀⠀⠀⠀⠘⠿⡇⢸⡄⣿⣿⠷⡀⠙⠣⠄⢙⠞⠥⢒⣨⣭⡿⠋⡿⠁⡆⣼⠁⠀⠀⢀⡠⠔⠛⣳⣄⢣⠈⠉⠒⠛⡇⠀⡀⠁
⠀⠀⠀⠀⠀⠀⣇⠈⣧⣿⠻⠷⢮⣄⣀⣀⡠⠤⣶⠞⠋⣁⣠⣴⠇⢀⣼⣿⣿⠿⠛⠛⠒⠲⣶⣻⠉⠻⣧⠀⠀⠀⣧⡜⠀⠀
⠀⠀⠀⠀⠀⠀⣿⡄⢏⡇⠀⠀⢀⠜⠋⠁⣀⣶⣿⡾⣿⠿⠿⣿⣴⠿⢿⣿⠀⠀⠀⠀⠀⠀⠸⣯⠀⠀⠈⠃⠀⠀⠘⣧⠀⠀
⠀⠀⠀⠀⠀⢠⡏⢃⡘⡇⠀⠀⢸⣠⣾⠟⠛⠋⢸⠃⣿⠀⢠⡿⠃⠀⢸⣿⠀⠀⠀⠀⠀⠀⠀⢹⡄⠀⠀⠀⠀⠀⠀⠈⢣⡀
⠀⠀⠀⠀⢀⡜⠀⠈⠧⣥⣀⣤⣾⠟⠉⠀⠀⢀⣾⢀⣿⠀⡿⠁⠀⠀⢸⣿⡇⠀⠀⠀⠀⠀⠀⠀⢷⠀⠀⣀⡤⠖⠚⠋⠉⠉
⠀⠀⠀⠀⠉⠀⠀⢀⣠⡞⣫⣿⠁⠀⠀⠀⠀⢠⡇⢸⣿⠀⠀⠀⠀⠀⢸⣿⡇⠀⠀⠀⠀⠀⠀⠀⢸⡶⠞⠁⠀⠀⠀⠀⠀⠀
**/
#include<bits/stdc++.h>
#define all(x) x.begin(),x.end()
using namespace std;
using pii = pair<int,int>; 

const int N = 100002;

int n;
vector<pii> adj;
int arr[N];
int64_t ans = 0;

void mSort(int l, int r)
{
    if(l >= r) return;
    int mid = l+(r-l)/2;
    mSort(l,mid);
    mSort(mid+1,r);

    int n1 = mid-l+1;
    int n2 = r-mid;

    int64_t sum = 0;
    int ss = 0;
    int64_t tempans = 0;

    int temp1[n1],temp2[n2];

    for(int i=0;i<n1;i++)
    {
        temp1[i] = arr[l+i];
        sum += temp1[i];
        ss++;
    }
    for(int i=0;i<n2;i++)
    {
        temp2[i] = arr[mid+1+i];
    }

    int i,j,k;
    i = j = 0;
    k = l;

    while(i < n1 and j < n2)
    {
        if(temp1[i] < temp2[j])
        {
            sum -= temp1[i];
            ss--;
            arr[k++] = temp1[i++];
        }
        else
        {
            tempans += (temp2[j]*ss)+sum;
            arr[k++] = temp2[j++];
        }
    }

    while( i < n1)
    {
        arr[k++] = temp1[i++];
    }

    while( j < n2)
    {
        arr[k++] = temp2[j++];
    }

    ans += tempans;
}

int main()
{
    cin >> n;
    
    for(int i=0;i<n;i++)
    {
        int u,v;
        cin >> u >> v;
        adj.push_back({u,v});
    }

    sort(all(adj),[](const pii &a,const pii &b){
        return a.second < b.second;
    });

    for(int i=0;i<n;i++)
    {
        arr[i] = adj[i].first;
    }

    mSort(0,n-1);

    cout << ans;

    return 0;
}

/*
แนวคิด

A   2   7   9   18   3   5  ai > aj
B   1   6   3    4   2   5  bi < bj
                            ai + aj

                            Sort by using B น้อย -> มาก

(ต่ำแหน่งห้ามเปลี่ยนแล้ว)
    2   3   9    18  5   7
    1   2   3    4   5   6   
                                (ai + aj)

    l       r                  i อยู่ l , j อยู่ r 
                                ทำให้ไม่ต้องคิด bi < bj check แค่ ai > aj ?
    ปัญหา คือ ไม่รู้ว่า ai > aj อยู่ตรงไหนบ้าง
    เรียกปัญหานี้ว่า count inversion


----- inversion ------
 คู่อัดับ (i,j) ที่ i < j แต่ เลขซ้ายมากกว่าเลขขวา  
----------------------

ใช้ divide and conquer
แบ่งใหญ่เป็นเล็ก แล้วใช้วิธีโง่ๆแก้ปัญหาเล็ก
แล้วก็มาสร้างเป็นปัณหาใหญ่ๆต่อ

implement merge sort <---- วิธีนี้

2 3 9 18 5 7   <---- มี inversion กี่ตัว ถ้าเป็น inversion ก็เอามาบวกกัน
     |
     v
    merge sort

2 3 9 | 5 7 18  <--- ขั้นสุดท้าย ของ merge sort 


testcase สมมุติ merge sort
 1 4 7 8 9 | 2 5 10 13
   l         r

                          l เป็นค่าน้อยสุดๆของฝั่งขวาแล้ว
                             มันยังมากกว่า r
                        ตัวต่อๆไปก็ต้องมากกว่า ในกรณี คือ 4 7 8 9
                        (2+4), (2+7),(2+8), (2+9) == 2* จำนวนที่เหลือ + sum ที่เหลือ
                                                  == 2*(4) + (4+7+8+9)
*/